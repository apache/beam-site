<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Beam (incubating)</title>
    <description>Apache Beam is an open source, unified model and set of language-specific SDKs for defining and executing data processing workflows, and also data ingestion and integration flows, supporting Enterprise Integration Patterns (EIPs) and Domain Specific Languages (DSLs). Dataflow pipelines simplify the mechanics of large-scale batch and streaming data processing and can run on a number of runtimes like Apache Flink, Apache Spark, and Google Cloud Dataflow (a cloud service). Beam also brings DSL in different languages, allowing users to easily implement their data integration processes.
</description>
    <link>http://beam.incubator.apache.org/</link>
    <atom:link href="http://beam.incubator.apache.org/feed.xml" rel="self" type="application/rss+xml"/>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>Testing Unbounded Pipelines in Apache Beam</title>
        <description>&lt;p&gt;The Beam Programming Model unifies writing pipelines for Batch and Streaming
pipelines. We’ve recently introduced a new PTransform to write tests for
pipelines that will be run over unbounded datasets and must handle out-of-order
and delayed data.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Watermarks, Windows and Triggers form a core part of the Beam programming model
– they respectively determine how your data are grouped, when your input is
complete, and when to produce results. This is true for all pipelines,
regardless of if they are processing bounded or unbounded inputs. If you’re not
familiar with watermarks, windowing, and triggering in the Beam model,
&lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot;&gt;Streaming 101&lt;/a&gt;
and &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102&quot;&gt;Streaming 102&lt;/a&gt;
are an excellent place to get started. A key takeaway from
these articles: in realistic streaming scenarios with intermittent failures and
disconnected users, data can arrive out of order or be delayed. Beam’s
primitives provide a way for users to perform useful, powerful, and correct
computations in spite of these challenges.&lt;/p&gt;

&lt;p&gt;As Beam pipeline authors, we need comprehensive tests that cover crucial
failure scenarios and corner cases to gain real confidence that a pipeline is
ready for production. The existing testing infrastructure within the Beam SDKs
permits tests to be written which examine the contents of a Pipeline at
execution time. However, writing unit tests for pipelines that may receive
late data or trigger multiple times has historically ranged from complex to
not possible, as pipelines that read from unbounded sources do not shut down
without external intervention, while pipelines that read from bounded sources
exclusively cannot test behavior with late data nor most speculative triggers.
Without additional tools, pipelines that use custom triggers and handle
out-of-order data could not be easily tested.&lt;/p&gt;

&lt;p&gt;This blog post introduces our new framework for writing tests for pipelines that
handle delayed and out-of-order data in the context of the LeaderBoard pipeline
from the Mobile Gaming example series.&lt;/p&gt;

&lt;h2 id=&quot;leaderboard-and-the-mobile-gaming-example&quot;&gt;LeaderBoard and the Mobile Gaming Example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/incubator-beam/blob/master/examples/java8/src/main/java/org/apache/beam/examples/complete/game/LeaderBoard.java#L177&quot;&gt;LeaderBoard&lt;/a&gt;
is part of the &lt;a href=&quot;https://github.com/apache/incubator-beam/tree/master/examples/java8/src/main/java/org/apache/beam/examples/complete/game&quot;&gt;Beam mobile gaming examples&lt;/a&gt;
(and &lt;a href=&quot;/get-started/mobile-gaming-example/&quot;&gt;walkthroughs&lt;/a&gt;)
which produces a continuous accounting of user and team scores. User scores are
calculated over the lifetime of the program, while team scores are calculated
within fixed windows with a default duration of one hour. The LeaderBoard
pipeline produces speculative and late panes as appropriate, based on the
configured triggering and allowed lateness of the pipeline. The expected outputs
of the LeaderBoard pipeline vary depending on when elements arrive in relation
to the watermark and the progress of processing time, which could not previously
be controlled within a test.&lt;/p&gt;

&lt;h2 id=&quot;writing-deterministic-tests-to-emulate-nondeterminism&quot;&gt;Writing Deterministic Tests to Emulate Nondeterminism&lt;/h2&gt;

&lt;p&gt;The Beam testing infrastructure provides the
&lt;a href=&quot;/documentation/sdks/javadoc/0.3.0-incubating/org/apache/beam/sdk/testing/PAssert.html&quot;&gt;PAssert&lt;/a&gt;
methods, which assert properties about the contents of a PCollection from within
a pipeline. We have expanded this infrastructure to include
&lt;a href=&quot;https://github.com/apache/incubator-beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/testing/TestStream.java&quot;&gt;TestStream&lt;/a&gt;,
which is a PTransform that performs a series of events, consisting of adding
additional elements to a pipeline, advancing the watermark of the TestStream,
and advancing the pipeline processing time clock. TestStream permits tests which
observe the effects of triggers on the output a pipeline produces.&lt;/p&gt;

&lt;p&gt;While executing a pipeline that reads from a TestStream, the read waits for all
of the consequences of each event to complete before continuing on to the next
event, ensuring that when processing time advances, triggers that are based on
processing time fire as appropriate. With this transform, the effect of
triggering and allowed lateness can be observed on a pipeline, including
reactions to speculative and late panes and dropped data.&lt;/p&gt;

&lt;h2 id=&quot;element-timings&quot;&gt;Element Timings&lt;/h2&gt;

&lt;p&gt;Elements arrive either before, with, or after the watermark, which categorizes
them into the “early”, “on-time”, and “late” divisions. “Late” elements can be
further subdivided into “unobservably”, “observably”, and “droppably” late,
depending on the window to which they are assigned and the maximum allowed
lateness, as specified by the windowing strategy. Elements that arrive with
these timings are emitted into panes, which can be “EARLY”, “ON-TIME”, or
“LATE”, depending on the position of the watermark when the pane was emitted.&lt;/p&gt;

&lt;p&gt;Using TestStream, we can write tests that demonstrate that speculative panes are
output after their trigger condition is met, that the advancing of the watermark
causes the on-time pane to be produced, and that late-arriving data produces
refinements when it arrives before the maximum allowed lateness, and is dropped
after.&lt;/p&gt;

&lt;p&gt;The following examples demonstrate how you can use TestStream to provide a
sequence of events to the Pipeline, where the arrival of elements is interspersed
with updates to the watermark and the advance of processing time. Each of these
events runs to completion before additional events occur.&lt;/p&gt;

&lt;p&gt;In the diagrams, the time at which events occurred in “real” (event) time
progresses as the graph moves to the right. The time at which the pipeline
receives them progresses as the graph goes upwards. The watermark is represented
by the squiggly red line, and each starburst is the firing of a trigger and the
associated pane.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/test-stream/elements-all-on-time.png&quot; alt=&quot;Elements on the Event and Processing time axes, with the Watermark and produced panes&quot; width=&quot;442&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;everything-arrives-on-time&quot;&gt;Everything arrives on-time&lt;/h3&gt;

&lt;p&gt;For example, if we create a TestStream where all the data arrives before the
watermark and provide the result PCollection as input to the CalculateTeamScores
PTransform:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Move the watermark past the end the end of the window&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;                               &lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkToInfinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateTeamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOWED_LATENESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;we can then assert that the result PCollection contains elements that arrived:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/test-stream/elements-all-on-time.png&quot; alt=&quot;Elements all arrive before the watermark, and are produced in the on-time pane&quot; width=&quot;442&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Only one value is emitted for the blue team&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsInAnyOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;some-elements-are-late-but-arrive-before-the-end-of-the-window&quot;&gt;Some elements are late, but arrive before the end of the window&lt;/h3&gt;

&lt;p&gt;We can also add data to the TestStream after the watermark, but before the end
of the window (shown below to the left of the red watermark), which demonstrates
“unobservably late” data - that is, data that arrives late, but is promoted by
the system to be on time, as it arrives before the watermark passes the end of
the window&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;       &lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Move the watermark up to &quot;near&quot; the end of the window&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;               &lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkToInfinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateTeamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOWED_LATENESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/test-stream/elements-unobservably-late.png&quot; alt=&quot;An element arrives late, but before the watermark passes the end of the window, and is produced in the on-time pane&quot; width=&quot;442&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Only one value is emitted for the blue team&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsInAnyOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;elements-are-late-and-arrive-after-the-end-of-the-window&quot;&gt;Elements are late, and arrive after the end of the window&lt;/h3&gt;

&lt;p&gt;By advancing the watermark farther in time before adding the late data, we can
demonstrate the triggering behavior that causes the system to emit an on-time
pane, and then after the late data arrives, a pane that refines the result.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
       &lt;span class=&quot;err&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Move the watermark up to &quot;near&quot; the end of the window&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;                                &lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkToInfinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateTeamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOWED_LATENESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/test-stream/elements-observably-late.png&quot; alt=&quot;Elements all arrive before the watermark, and are produced in the on-time pane&quot; width=&quot;442&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// An on-time pane is emitted with the events that arrived before the window closed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inOnTimePane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsInAnyOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The final pane contains the late refinement&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inFinalPane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsInAnyOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;elements-are-late-and-after-the-end-of-the-window-plus-the-allowed-lateness&quot;&gt;Elements are late, and after the end of the window plus the allowed lateness&lt;/h3&gt;

&lt;p&gt;If we push the watermark even further into the future, beyond the maximum
configured allowed lateness, we can demonstrate that the late element is dropped
by the system.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Move the watermark up to &quot;near&quot; the end of the window&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;                                        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLOWED_LATENESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;                                        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sky&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkToInfinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateTeamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEAM_WINDOW_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOWED_LATENESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/test-stream/elements-droppably-late.png&quot; alt=&quot;Elements all arrive before the watermark, and are produced in the on-time pane&quot; width=&quot;442&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// An on-time pane is emitted with the events that arrived before the window closed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teamScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsInAnyOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;elements-arrive-before-the-end-of-the-window-and-some-processing-time-passes&quot;&gt;Elements arrive before the end of the window, and some processing time passes&lt;/h3&gt;
&lt;p&gt;Using additional methods, we can demonstrate the behavior of speculative
triggers by advancing the processing time of the TestStream. If we add elements
to an input PCollection, occasionally advancing the processing time clock, and
apply &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculateUserScores&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scarlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;              &lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scarlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceProcessingTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oxblood&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;              &lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameActionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scarlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceProcessingTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceWatermarkToInfinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateUserScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLOWED_LATENESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/test-stream/elements-processing-speculative.png&quot; alt=&quot;Elements all arrive before the watermark, and are produced in the on-time pane&quot; width=&quot;442&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userScores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inEarlyGlobalWindowPanes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsInAnyOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scarlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scarlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oxblood&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;teststream---under-the-hood&quot;&gt;TestStream - Under the Hood&lt;/h2&gt;

&lt;p&gt;TestStream relies on a pipeline concept we’ve introduced, called quiescence, to
utilize the existing runner infrastructure while providing guarantees about when
a root transform will called by the runner. This consists of properties about
pending elements and triggers, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No trigger is permitted to fire but has not fired&lt;/li&gt;
  &lt;li&gt;All elements are either buffered in state or cannot progress until a side input becomes available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simplified, this means that, in the absence of an advancement in input
watermarks or processing time, or additional elements being added to the
pipeline, the pipeline will not make progress. Whenever the TestStream PTransform
performs an action, the runner must not reinvoke the same instance until the
pipeline has quiesced. This ensures that the events specified by TestStream
happen “in-order”, which ensures that input watermarks and the system clock do
not advance ahead of the elements they hoped to hold up.&lt;/p&gt;

&lt;p&gt;The DirectRunner has been modified to use quiescence as the signal that it
should add more work to the Pipeline, and the implementation of TestStream in
that runner uses this fact to perform a single output per event. The DirectRunner
implementation also directly controls the runner’s system clock, ensuring that
tests will complete promptly even if there is a multi-minute processing time
trigger located within the pipeline.&lt;/p&gt;

&lt;p&gt;The TestStream transform is supported in the DirectRunner. For most users, tests
written using TestPipeline and PAsserts will automatically function while using
TestStream.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The addition of TestStream alongside window and pane-specific matchers in PAssert
has enabled the testing of Pipelines which produce speculative and late panes.
This permits tests for all styles of pipeline to be expressed directly within the
Java SDK. If you have questions or comments, we’d love to hear them on the
&lt;a href=&quot;/use/mailing-lists/&quot;&gt;mailing lists&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 11:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/blog/2016/10/20/test-stream.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/blog/2016/10/20/test-stream.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Strata+Hadoop World and Beam</title>
        <description>&lt;p&gt;Tyler Akidau and I gave a &lt;a href=&quot;http://conferences.oreilly.com/strata/hadoop-big-data-ny/public/schedule/detail/52129&quot;&gt;three-hour tutorial&lt;/a&gt; on Apache Beam at Strata+Hadoop World 2016. We had a plethora of help from our TAs: Kenn Knowles, Reuven Lax, Felipe Hoffa, Slava Chernyak, and Jamie Grier. There were a total of 66 people that attended the session.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/IMG_20160927_170956.jpg&quot; alt=&quot;Exercise time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to take a look at the tutorial materials, we’ve put them up &lt;a href=&quot;https://github.com/eljefe6a/beamexample&quot;&gt;on GitHub&lt;/a&gt;. This includes the &lt;a href=&quot;https://github.com/eljefe6a/beamexample/blob/master/BeamTutorial/slides.pdf&quot;&gt;actual slides&lt;/a&gt; as well as the &lt;a href=&quot;https://github.com/eljefe6a/beamexample/tree/master/BeamTutorial/src/main/java/org/apache/beam/examples/tutorial/game&quot;&gt;exercises&lt;/a&gt; that we covered. If you’re looking to learn a little about Beam, this is a good way to start. The exercises are based on an imaginary mobile game where data needs processing and are based on code in the &lt;a href=&quot;https://github.com/apache/incubator-beam/tree/master/examples/java8/src/main/java/org/apache/beam/examples/complete/game&quot;&gt;Beam examples directory&lt;/a&gt;. The code has TODOs for where you need to fill in code or there are full sample solutions to look over our code. You can run these examples on your own machine or on a cluster using a runner that Beam supports.&lt;/p&gt;

&lt;p&gt;I want to share some of takeaways I had about Beam during the conference.&lt;/p&gt;

&lt;p&gt;The Data Engineers are looking to Beam as a way to &lt;a href=&quot;https://www.oreilly.com/ideas/future-proof-and-scale-proof-your-code&quot;&gt;future-proof&lt;/a&gt;, meaning that code is portable between the various Big Data frameworks. In fact, many of the attendees were still on Hadoop MapReduce and looking to transition to a new framework. They’re realizing that continually rewriting code isn’t the most productive approach.&lt;/p&gt;

&lt;p&gt;Data Scientists are really interested in using Beam. They interested in having a single API for doing analysis instead of several different APIs. We talked about Beam’s progress on the Python API. If you want to take a peek, it’s being actively developed on a &lt;a href=&quot;https://github.com/apache/incubator-beam/tree/python-sdk&quot;&gt;feature branch&lt;/a&gt;. As Beam matures, we’re looking to add other supported languages.&lt;/p&gt;

&lt;p&gt;We heard &lt;a href=&quot;https://twitter.com/jessetanderson/status/781124173108305920&quot;&gt;loud and clear&lt;/a&gt; from Beam users that great runner support is crucial to adoption. We have great Apache Flink support. During the conference we had some more volunteers offer their help on the Spark runner.&lt;/p&gt;

&lt;p&gt;On management and thought leader side, Beam went from “what’s Beam?” at previous conferences to “I’m interested in Beam.” or “I’ve formed an informed opinion on Beam.” at this conference. This is one of the metrics I look for in early technology adoption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/IMG_20160927_170455.jpg&quot; alt=&quot;So much brainpower answering questions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We rounded out the tutorial with live demonstrations of Beam running on Apache Spark, Apache Flink, the local runner, and DataFlow runner. Then, we brought in the big brainpower and had a Q and A session.&lt;/p&gt;

&lt;p&gt;If you’re attending a conference, we encourage you to look for a Beam session. If you want to use these materials to give your own Beam talk or tutorial, we’re happy to help you. In addition to this tutorial, we have &lt;a href=&quot;/learn/presentation-materials/&quot;&gt;other presentation materials&lt;/a&gt;. You can reach out to us on the &lt;a href=&quot;/use/mailing-lists/&quot;&gt;user mailing list&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 10:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/beam/update/2016/10/11/strata-hadoop-world-and-beam.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/beam/update/2016/10/11/strata-hadoop-world-and-beam.html</guid>
        
        
        <category>beam</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Apache Beam: Six Months in Incubation</title>
        <description>&lt;p&gt;It’s been just over six months since Apache Beam was formally accepted into incubation with the &lt;a href=&quot;http://www.apache.org&quot;&gt;Apache Software Foundation&lt;/a&gt;. As a community, we’ve been hard at work getting Beam off the ground.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Looking just at raw numbers for those first six months, that’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;48,238 lines of preexisting code donated by Cloudera, dataArtisans, and Google.&lt;/li&gt;
  &lt;li&gt;761 pull requests from 45 contributors.&lt;/li&gt;
  &lt;li&gt;498 Jira issues opened and 245 resolved.&lt;/li&gt;
  &lt;li&gt;1 incubating release (and another 1 in progress).&lt;/li&gt;
  &lt;li&gt;4,200 hours of automated tests.&lt;/li&gt;
  &lt;li&gt;161 subscribers / 606 messages on user@.&lt;/li&gt;
  &lt;li&gt;217 subscribers / 1205 messages on dev@.&lt;/li&gt;
  &lt;li&gt;277 stars and 174 forks on GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And behind those numbers, there’s been a ton of technical progress, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Refactoring of the entire codebase, examples, and tests to be truly runner-independent.&lt;/li&gt;
  &lt;li&gt;New functionality in the Apache Flink runner for timestamps/windows in batch and bounded sources and side inputs in streaming mode.&lt;/li&gt;
  &lt;li&gt;Work in progress to upgrade the Apache Spark runner to use Spark 2.0.&lt;/li&gt;
  &lt;li&gt;Several new runners from the wider Apache community – Apache Gearpump has its own feature branch, Apache Apex has a PR, and conversations are starting on Apache Storm and others.&lt;/li&gt;
  &lt;li&gt;New SDKs/DSLs for exposing the Beam model – the Python SDK from Google is in on a feature branch, and there are plans to add the Scio DSL from Spotify.&lt;/li&gt;
  &lt;li&gt;Support for additional data sources and sinks – Apache Kafka and JMS are in, there are PRs for Amazon Kinesis, Apache Cassandra, and MongoDB, and more connectors are being planned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But perhaps most importantly, we’re committed to building an involved, welcoming community. So far, we’ve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Started building a vibrant developer community, with detailed design discussions on features like DoFn reuse semantics, serialization technology, and an API for accessing state.&lt;/li&gt;
  &lt;li&gt;Started building a user community with an active mailing list and improvements to the website and documentation.&lt;/li&gt;
  &lt;li&gt;Had multiple talks on Beam at venues including ApacheCon, Hadoop Summit, Kafka Summit, JBCN Barcelona, and Strata.&lt;/li&gt;
  &lt;li&gt;Presented at multiple existing meetups and are starting to organize some of our own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it’s nice to reflect back on all we’ve done, we’re working full &lt;em&gt;stream&lt;/em&gt; ahead towards a stable release and graduation from incubator. And we’d love your help – join the &lt;a href=&quot;/use/mailing-lists/&quot;&gt;mailing lists&lt;/a&gt;, check out the &lt;a href=&quot;/contribute/contribution-guide/&quot;&gt;contribution guide&lt;/a&gt;, and grab a &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-520?jql=project%20%3D%20BEAM%20AND%20resolution%20%3D%20Unresolved%20AND%20labels%20in%20(newbie%2C%20starter)&quot;&gt;starter task&lt;/a&gt; from Jira!&lt;/p&gt;

</description>
        <pubDate>Wed, 03 Aug 2016 00:00:01 -0700</pubDate>
        <link>http://beam.incubator.apache.org/blog/2016/08/03/six-months.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/blog/2016/08/03/six-months.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The first release of Apache Beam!</title>
        <description>&lt;p&gt;I’m happy to announce that Apache Beam has officially released its first
version – 0.1.0-incubating. This is an exciting milestone for the project,
which joined the Apache Software Foundation and the Apache Incubator earlier
this year.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This release publishes the first set of Apache Beam binaries and source code,
making them readily available for our users. The initial release includes the
SDK for Java, along with three runners: Apache Flink, Apache Spark and Google
Cloud Dataflow, a fully-managed cloud service. The release is available both
in the &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.beam%22&quot;&gt;Maven Central Repository&lt;/a&gt;,
as well as a download from the &lt;a href=&quot;/use/releases/&quot;&gt;project’s website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal of this release was process-oriented. In particular, the Beam
community wanted to release existing functionality to our users, build and
validate the release processes, and obtain validation from the Apache Software
Foundation and the Apache Incubator.&lt;/p&gt;

&lt;p&gt;I’d like to encourage everyone to try out this release. Please keep in mind
that this is the first incubating release – significant changes are to be
expected. As we march toward stability, a rapid cadence of future releases is
anticipated, perhaps one every 1-2 months.&lt;/p&gt;

&lt;p&gt;As always, the Beam community welcomes feedback. Stabilization, usability and
the developer experience will be our focus for the next several months. If you
have any comments or discover any issues, I’d like to invite you to reach out
to us via &lt;a href=&quot;/use/mailing-lists/&quot;&gt;user’s mailing list&lt;/a&gt; or the
&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM/&quot;&gt;Apache JIRA issue tracker&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 00:00:01 -0700</pubDate>
        <link>http://beam.incubator.apache.org/beam/release/2016/06/15/first-release.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/beam/release/2016/06/15/first-release.html</guid>
        
        
        <category>beam</category>
        
        <category>release</category>
        
      </item>
    
      <item>
        <title>How We Added Windowing to the Apache Flink Batch Runner</title>
        <description>&lt;p&gt;We recently achieved a major milestone by adding support for windowing to the &lt;a href=&quot;http://flink.apache.org&quot;&gt;Apache Flink&lt;/a&gt; Batch runner. In this post we would like to explain what this means for users of Apache Beam and highlight some of the implementation details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Before we start, though, let’s quickly talk about the execution of Beam programs and how this is relevant to today’s post. A Beam pipeline can contain bounded and unbounded sources. If the pipeline only contains bounded sources it can be executed in a batch fashion, if it contains some unbounded sources it must be executed in a streaming fashion. When executing a Beam pipeline on Flink, you don’t have to choose the execution mode. Internally, the Flink runner either translates the pipeline to a Flink &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSet&lt;/code&gt; program or a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataStream&lt;/code&gt; program, depending on whether unbounded sources are used in the pipeline. In the following, when we say “Batch runner” what we are really talking about is the Flink runner being in batch execution mode.&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-mean-for-users&quot;&gt;What does this mean for users?&lt;/h2&gt;

&lt;p&gt;Support for windowing was the last missing puzzle piece for making the Flink Batch runner compatible with the Beam model. With the latest change to the Batch runner users can now run any pipeline that only contains bounded sources and be certain that the results match those of the original reference-implementation runners that were provided by Google as part of the initial code drop coming from the Google Dataflow SDK.&lt;/p&gt;

&lt;p&gt;The most obvious part of the change is that windows can now be assigned to elements and that the runner respects these windows for the &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt; operations. A not-so-obvious change concerns side-inputs. In the Beam model, side inputs respect windows; when a value of the main input is being processed only the side input that corresponds to the correct window is available to the processing function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Getting side-input semantics right is an important milestone in it’s own because it allows to use a big suite of unit tests for verifying the correctness of a runner implementation. These tests exercise every obscure detail of the Beam programming model and verify that the results produced by a runner match what you would expect from a correct implementation. In the suite, side inputs are used to compare the expected result to the actual result. With these tests being executed regularly we can now be more confident that the implementation produces correct results for user-specified pipelines.&lt;/p&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the Hood&lt;/h2&gt;
&lt;p&gt;The basis for the changes is the introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowedValue&lt;/code&gt; in the generated Flink transformations. Before, a Beam &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&amp;lt;T&amp;gt;&lt;/code&gt; would be transformed to a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSet&amp;lt;T&amp;gt;&lt;/code&gt;. Now, we instead create a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSet&amp;lt;WindowedValue&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowedValue&amp;lt;T&amp;gt;&lt;/code&gt; stores meta data about the value, such as the timestamp and the windows to which it was assigned.&lt;/p&gt;

&lt;p&gt;With this basic change out of the way we just had to make sure that windows were respected for side inputs and that &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt; correctly handled windows. The tricky part there is the handling of merging windows such as session windows. For these we essentially emulate the behavior of a merging &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowFn&lt;/code&gt; in our own code.&lt;/p&gt;

&lt;p&gt;After we got side inputs working we could enable the aforementioned suite of tests to check how well the runner behaves with respect to the Beam model. As can be expected there were quite some discrepancies but we managed to resolve them all. In the process, we also slimmed down the runner implementation. For example, we removed all custom translations for sources and sinks and are now relying only on Beam code for these, thereby greatly reducing the maintenance overhead.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We reached a major milestone in adding windowing support to the Flink Batch runner, thereby making it compatible with the Beam model. Because of the large suite of tests that can now be executed on the runner we are also confident about the correctness of the implementation and about it staying that way in the future.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 09:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/blog/2016/06/13/flink-batch-runner-milestone.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/blog/2016/06/13/flink-batch-runner-milestone.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Where's my PCollection.map()?</title>
        <description>&lt;p&gt;Have you ever wondered why Beam has PTransforms for everything instead of having methods on PCollection? Take a look at the history that led to this (and other) design decisions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Though Beam is relatively new, its design draws heavily on many years of experience with real-world pipelines. One of the primary inspirations is &lt;a href=&quot;http://research.google.com/pubs/pub35650.html&quot;&gt;FlumeJava&lt;/a&gt;, which is Google’s internal successor to MapReduce first introduced in 2009.&lt;/p&gt;

&lt;p&gt;The original FlumeJava API has methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parallelDo&lt;/code&gt; on the PCollections. Though slightly more succinct, this approach has many disadvantages to extensibility. Every new user to FlumeJava wanted to add transforms, and adding them as methods to PCollection simply doesn’t scale well. In contrast, a PCollection in Beam has a single &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; method which takes any PTransform as an argument.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;FlumeJava&lt;/th&gt;
    &lt;th&gt;Beam&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;pre&gt;
PCollection&amp;lt;T&amp;gt; input = …
PCollection&amp;lt;O&amp;gt; output = input.count()
                             .parallelDo(...);
    &lt;/pre&gt;&lt;/td&gt;
    &lt;td&gt;&lt;pre&gt;
PCollection&amp;lt;T&amp;gt; input = …
PCollection&amp;lt;O&amp;gt; output = input.apply(Count.perElement())
                             .apply(ParDo.of(...));
    &lt;/pre&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This is a more scalable approach for several reasons.&lt;/p&gt;

&lt;h2 id=&quot;where-to-draw-the-line&quot;&gt;Where to draw the line?&lt;/h2&gt;
&lt;p&gt;Adding methods to PCollection forces a line to be drawn between operations that are “useful” enough to merit this special treatment and those that are not. It is easy to make the case for flat map, group by key, and combine per key. But what about filter? Count? Approximate count? Approximate quantiles? Most frequent? WriteToMyFavoriteSource? Going too far down this path leads to a single enormous class that contains nearly everything one could want to do. (FlumeJava’s PCollection class is over 5000 lines long with around 70 distinct operations, and it could have been &lt;em&gt;much&lt;/em&gt; larger had we accepted every proposal.) Furthermore, since Java doesn’t allow adding methods to a class, there is a sharp syntactic divide between those operations that are added to PCollection and those that aren’t. A traditional way to share code is with a library of functions, but functions (in traditional languages like Java at least) are written prefix-style, which doesn’t mix well with the fluent builder style (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;input.operation1().operation2().operation3()&lt;/code&gt; vs. &lt;code class=&quot;highlighter-rouge&quot;&gt;operation3(operation1(input).operation2())&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Instead in Beam we’ve chosen a style that places all transforms–whether they be primitive operations, composite operations bundled in the SDK, or part of an external library–on equal footing. This also facilitates alternative implementations (which may even take different options) that are easily interchangeable.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;FlumeJava&lt;/th&gt;
    &lt;th&gt;Beam&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;pre&gt;
PCollection&amp;lt;O&amp;gt; output =
    ExternalLibrary.doStuff(
        MyLibrary.transform(input, myArgs)
            .parallelDo(...),
        externalLibArgs);
    &lt;/pre&gt;&lt;/td&gt;
    &lt;td&gt;&lt;pre&gt;
PCollection&amp;lt;O&amp;gt; output = input
    .apply(MyLibrary.transform(myArgs))
    .apply(ParDo.of(...))
    .apply(ExternalLibrary.doStuff(externalLibArgs));
    &amp;nbsp;
    &lt;/pre&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;configurability&quot;&gt;Configurability&lt;/h2&gt;
&lt;p&gt;It makes for a fluent style to let values (PCollections) be the objects passed around and manipulated (i.e. the handles to the deferred execution graph), but it is the operations themselves that need to be composable, configurable, and extendable. Using PCollection methods for the operations doesn’t scale well here, especially in a language without default or keyword arguments. For example, a ParDo operation can have any number of side inputs and side outputs, or a write operation may have configurations dealing with encoding and compression. One option is to separate these out into multiple overloads or even methods, but that exacerbates the problems above. (FlumeJava evolved over a dozen overloads of the &lt;code class=&quot;highlighter-rouge&quot;&gt;parallelDo&lt;/code&gt; method!) Another option is to pass each method a configuration object that can be built up using more fluent idioms like the builder pattern, but at that point one might as well make the configuration object the operation itself, which is what Beam does.&lt;/p&gt;

&lt;h2 id=&quot;type-safety&quot;&gt;Type Safety&lt;/h2&gt;
&lt;p&gt;Many operations can only be applied to collections whose elements are of a specific type. For example, the GroupByKey operation should only be applied to &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&amp;lt;KV&amp;lt;K, V&amp;gt;&amp;gt;&lt;/code&gt;s. In Java at least, it’s not possible to restrict methods based on the element type parameter alone. In FlumeJava, this led us to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;PTable&amp;lt;K, V&amp;gt;&lt;/code&gt; subclassing &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&amp;lt;KV&amp;lt;K, V&amp;gt;&amp;gt;&lt;/code&gt; to contain all the operations specific to PCollections of key-value pairs. This leads to the same question of which element types are special enough to merit being captured by PCollection subclasses. It is not very extensible for third parties and often requires manual downcasts/conversions (which can’t be safely chained in Java) and special operations that produce these PCollection specializations.&lt;/p&gt;

&lt;p&gt;This is particularly inconvenient for transforms that produce outputs whose element types are the same as (or related to) their input’s element types, requiring extra support to generate the right subclasses (e.g. a filter on a PTable should produce another PTable rather than just a raw PCollection of key-value pairs).&lt;/p&gt;

&lt;p&gt;Using PTransforms allows us to sidestep this entire issue. We can place arbitrary constraints on the context in which a transform may be used based on the type of its inputs; for instance GroupByKey is statically typed to only apply to a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&amp;lt;KV&amp;lt;K, V&amp;gt;&amp;gt;&lt;/code&gt;. The way this happens is generalizable to arbitrary shapes, without needing to introduce specialized types like PTable.&lt;/p&gt;

&lt;h2 id=&quot;reusability-and-structure&quot;&gt;Reusability and Structure&lt;/h2&gt;
&lt;p&gt;Though PTransforms are generally constructed at the site at which they’re used, by pulling them out as separate objects one is able to store them and pass them around.&lt;/p&gt;

&lt;p&gt;As pipelines grow and evolve, it is useful to structure your pipeline into modular, often reusable components, and PTransforms allow one to do this nicely in a data-processing pipeline. In addition, modular PTransforms also expose the logical structure of your code to the system (e.g. for monitoring). Of the three different representations of the WordCount pipeline below, only the structured view captures the high-level intent of the pipeline. Letting even the simple operations be PTransforms means there’s less of an abrupt edge to packaging things up into composite operations.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/simple-wordcount-pipeline.png&quot; alt=&quot;Three different visualizations of a simple WordCount pipeline&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;i&gt;Three different visualizations of a simple WordCount pipeline which computes the number of occurrences of every word in a set of text files. The flat view gives the full DAG of all operations performed. The execution view groups operations according to how they're executed, e.g. after performing runner-specific optimizations like function composition. The structured view nests operations according to their grouping in PTransforms.&lt;/i&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Although it’s tempting to add methods to PCollections, such an approach is not scalable, extensible, or sufficiently expressive. Putting a single apply method on PCollection and all the logic into the operation itself lets us have the best of both worlds, and avoids hard cliffs of complexity by having a single consistent style across simple and complex pipelines, and between predefined and user-defined operations.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 May 2016 09:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/blog/2016/05/27/where-is-my-pcollection-dot-map.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/blog/2016/05/27/where-is-my-pcollection-dot-map.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Dynamic work rebalancing for Beam</title>
        <description>&lt;p&gt;This morning, Eugene and Malo from the Google Cloud Dataflow team posted &lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/05/no-shard-left-behind-dynamic-work-rebalancing-in-google-cloud-dataflow&quot;&gt;&lt;em&gt;No shard left behind: dynamic work rebalancing in Google Cloud Dataflow&lt;/em&gt;&lt;/a&gt;. This article discusses Cloud Dataflow’s solution to the well-known straggler problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In a large batch processing job with many tasks executing in parallel, some of the tasks – the stragglers – can take a much longer time to complete than others, perhaps due to imperfect splitting of the work into parallel chunks when issuing the job. Typically, waiting for stragglers means that the overall job completes later than it should, and may also reserve too many machines that may be underutilized at the end. Cloud Dataflow’s dynamic work rebalancing can mitigate stragglers in most cases.&lt;/p&gt;

&lt;p&gt;What I’d like to highlight for the Apache Beam (incubating) community is that Cloud Dataflow’s dynamic work rebalancing is implemented using &lt;em&gt;runner-specific&lt;/em&gt; control logic on top of Beam’s &lt;em&gt;runner-independent&lt;/em&gt; &lt;a href=&quot;https://github.com/apache/incubator-beam/blob/9fa97fb2491bc784df53fb0f044409dbbc2af3d7/sdks/java/core/src/main/java/org/apache/beam/sdk/io/BoundedSource.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BoundedSource API&lt;/code&gt;&lt;/a&gt;. Specifically, to steal work from a straggler, a runner need only call the reader’s &lt;a href=&quot;https://github.com/apache/incubator-beam/blob/3edae9b8b4d7afefb5c803c19bb0a1c21ebba89d/sdks/java/core/src/main/java/org/apache/beam/sdk/io/BoundedSource.java#L266&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;splitAtFraction method&lt;/code&gt;&lt;/a&gt;. This will generate a new source containing leftover work, and then the runner can pass that source off to another idle worker. As Beam matures, I hope that other runners are interested in figuring out whether these APIs can help them improve performance, implementing dynamic work rebalancing, and collaborating on API changes that will help solve other pain points.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2016 11:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/blog/2016/05/18/splitAtFraction-method.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/blog/2016/05/18/splitAtFraction-method.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam Presentation Materials</title>
        <description>&lt;p&gt;Are you interested in giving a presentation about Apache Beam? Perhaps you want to talk about Apache Beam at a local Meetup or a convention. Excellent!  The Apache Beam community is excited to expand and grow the community. To help kickstart this process, we are excited to announce an initial set of &lt;a href=&quot;/learn/presentation-materials/&quot;&gt;Apache Beam presentation materials&lt;/a&gt; which anyone can use to give a presentation about Apache Beam.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As a community, we want to build a shared collection of high quality presentation materials. This initial set includes the following slide decks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Apache Beam model
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/r0nvWh&quot;&gt;Long version&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/h5D1yR&quot;&gt;Short version&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Using Apache Beam with runners
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/2ay8mi&quot;&gt;Google Cloud Dataflow&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Apache Beam grows, so will this repository of presentation materials. We are excited to add new materials as the Apache Beam ecosystem grows with new runners, SDKs, and so on. If you are interested in contributing content or have a request, please see the &lt;a href=&quot;/learn/presentation-materials/&quot;&gt;Apache Beam presentation materials&lt;/a&gt; page or email the &lt;a href=&quot;mailto:user@beam.incubator.apache.org&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user@beam.incubator.apache.org&lt;/code&gt;&lt;/a&gt; mailing list with your ideas or questions.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 11:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/beam/capability/2016/04/03/presentation-materials.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/beam/capability/2016/04/03/presentation-materials.html</guid>
        
        
        <category>beam</category>
        
        <category>capability</category>
        
      </item>
    
      <item>
        <title>Clarifying &amp; Formalizing Runner Capabilities</title>
        <description>&lt;p&gt;With initial code drops complete (&lt;a href=&quot;https://github.com/apache/incubator-beam/pull/1&quot;&gt;Dataflow SDK and Runner&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/incubator-beam/pull/12&quot;&gt;Flink Runner&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/incubator-beam/pull/42&quot;&gt;Spark Runner&lt;/a&gt;) and expressed interest in runner implementations for &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9&quot;&gt;Storm&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-19&quot;&gt;Hadoop&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-79&quot;&gt;Gearpump&lt;/a&gt; (amongst others), we wanted to start addressing a big question in the Apache Beam (incubating) community: what capabilities will each runner be able to support?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;While we’d love to have a world where all runners support the full suite of semantics included in the Beam Model (formerly referred to as the &lt;a href=&quot;http://www.vldb.org/pvldb/vol8/p1792-Akidau.pdf&quot;&gt;Dataflow Model&lt;/a&gt;), practically speaking, there will always be certain features that some runners can’t provide. For example, a Hadoop-based runner would be inherently batch-based and may be unable to (easily) implement support for unbounded collections. However, that doesn’t prevent it from being extremely useful for a large set of uses. In other cases, the implementations provided by one runner may have slightly different semantics that those provided by another (e.g. even though the current suite of runners all support exactly-once delivery guarantees, an &lt;a href=&quot;http://samza.apache.org/&quot;&gt;Apache Samza&lt;/a&gt; runner, which would be a welcome addition, would currently only support at-least-once).&lt;/p&gt;

&lt;p&gt;To help clarify things, we’ve been working on enumerating the key features of the Beam model in a &lt;a href=&quot;/learn/runners/capability-matrix/&quot;&gt;capability matrix&lt;/a&gt; for all existing runners, categorized around the four key questions addressed by the model: &lt;span class=&quot;wwwh-what-dark&quot;&gt;What&lt;/span&gt; / &lt;span class=&quot;wwwh-where-dark&quot;&gt;Where&lt;/span&gt; / &lt;span class=&quot;wwwh-when-dark&quot;&gt;When&lt;/span&gt; / &lt;span class=&quot;wwwh-how-dark&quot;&gt;How&lt;/span&gt; (if you’re not familiar with those questions, you might want to read through &lt;a href=&quot;http://oreilly.com/ideas/the-world-beyond-batch-streaming-102&quot;&gt;Streaming 102&lt;/a&gt; for an overview). This table will be maintained over time as the model evolves, our understanding grows, and runners are created or features added.&lt;/p&gt;

&lt;p&gt;Included below is a summary snapshot of our current understanding of the capabilities of the existing runners (see the &lt;a href=&quot;/learn/runners/capability-matrix/&quot;&gt;live version&lt;/a&gt; for full details, descriptions, and Jira links); since integration is still under way, the system as whole isn’t yet in a completely stable, usable state. But that should be changing in the near future, and we’ll be updating loud and clear on this blog when the first supported Beam 1.0 release happens.&lt;/p&gt;

&lt;p&gt;In the meantime, these tables should help clarify where we expect to be in the very near term, and help guide expectations about what existing runners are capable of, and what features runner implementers will be tackling next.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  function ToggleTables(showDetails, anchor) {
    document.getElementById(&quot;cap-summary&quot;).style.display = showDetails ? &quot;none&quot; : &quot;block&quot;;
    document.getElementById(&quot;cap-full&quot;).style.display = showDetails ? &quot;block&quot; : &quot;none&quot;;
    location.hash = anchor;
  }
&lt;/script&gt;

&lt;!-- Summary table --&gt;

&lt;div id=&quot;cap-blog&quot; style=&quot;display:block&quot;&gt;
&lt;table class=&quot;cap-summary&quot;&gt;
  
  &lt;tr class=&quot;cap-summary&quot; id=&quot;cap-blog-what&quot;&gt;
    &lt;th class=&quot;cap-summary color-metadata format-category&quot; colspan=&quot;5&quot; style=&quot;color:#ca1&quot;&gt;What is being computed?&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability&quot;&gt;&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#ec3&quot;&gt;Beam Model&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#ec3&quot;&gt;Google Cloud Dataflow&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#ec3&quot;&gt;Apache Flink&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#ec3&quot;&gt;Apache Spark&lt;/th&gt;
  
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;ParDo&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;GroupByKey&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Flatten&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Combine&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Composite Transforms&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Side Inputs&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Source API&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ec3;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Aggregators&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#fe5;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#ec3&quot;&gt;Keyed State&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#ca1&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;td class=&quot;cap-summary color-blank cap-blank&quot; colspan=&quot;5&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot; id=&quot;cap-blog-where&quot;&gt;
    &lt;th class=&quot;cap-summary color-metadata format-category&quot; colspan=&quot;5&quot; style=&quot;color:#37d&quot;&gt;Where in event time?&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability&quot;&gt;&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#59f&quot;&gt;Beam Model&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#59f&quot;&gt;Google Cloud Dataflow&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#59f&quot;&gt;Apache Flink&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#59f&quot;&gt;Apache Spark&lt;/th&gt;
  
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Global windows&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Fixed windows&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8cf;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;~&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Sliding windows&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Session windows&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Custom windows&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Custom merging windows&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#59f&quot;&gt;Timestamp control&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#59f;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#37d&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;td class=&quot;cap-summary color-blank cap-blank&quot; colspan=&quot;5&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot; id=&quot;cap-blog-when&quot;&gt;
    &lt;th class=&quot;cap-summary color-metadata format-category&quot; colspan=&quot;5&quot; style=&quot;color:#6a4&quot;&gt;When in processing time?&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability&quot;&gt;&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#8c6&quot;&gt;Beam Model&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#8c6&quot;&gt;Google Cloud Dataflow&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#8c6&quot;&gt;Apache Flink&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#8c6&quot;&gt;Apache Spark&lt;/th&gt;
  
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Configurable triggering&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Event-time triggers&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Processing-time triggers&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Count triggers&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;[Meta]data driven triggers&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Composite triggers&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Allowed lateness&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#8c6;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#8c6&quot;&gt;Timers&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#6a4&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;td class=&quot;cap-summary color-blank cap-blank&quot; colspan=&quot;5&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot; id=&quot;cap-blog-how&quot;&gt;
    &lt;th class=&quot;cap-summary color-metadata format-category&quot; colspan=&quot;5&quot; style=&quot;color:#b55&quot;&gt;How do refinements relate?&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability&quot;&gt;&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#d77&quot;&gt;Beam Model&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#d77&quot;&gt;Google Cloud Dataflow&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#d77&quot;&gt;Apache Flink&lt;/th&gt;
  
    &lt;th class=&quot;cap-summary color-platform format-platform&quot; style=&quot;color:#d77&quot;&gt;Apache Spark&lt;/th&gt;
  
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#d77&quot;&gt;Discarding&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#d77&quot;&gt;Accumulating&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#d77;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2713;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;th class=&quot;cap-summary color-capability format-capability&quot; style=&quot;color:#d77&quot;&gt;Accumulating &amp;amp; Retracting&lt;/th&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
    

    &lt;td width=&quot;25%&quot; class=&quot;cap-summary&quot; style=&quot;background-color:#ddd;border-color:#b55&quot;&gt;&lt;center&gt;&lt;b&gt;&amp;#x2715;&lt;/b&gt;&lt;/center&gt;
&lt;/td&gt;
    
  &lt;/tr&gt;
  
  &lt;tr class=&quot;cap-summary&quot;&gt;
    &lt;td class=&quot;cap-summary color-blank cap-blank&quot; colspan=&quot;5&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 17 Mar 2016 11:00:00 -0700</pubDate>
        <link>http://beam.incubator.apache.org/beam/capability/2016/03/17/capability-matrix.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/beam/capability/2016/03/17/capability-matrix.html</guid>
        
        
        <category>beam</category>
        
        <category>capability</category>
        
      </item>
    
      <item>
        <title>Dataflow Python SDK is now public!</title>
        <description>&lt;p&gt;When the Apache Beam project proposed entry into the &lt;a href=&quot;http://wiki.apache.org/incubator/BeamProposal&quot;&gt;Apache Incubator&lt;/a&gt; the proposal
included the &lt;a href=&quot;https://github.com/GoogleCloudPlatform/DataflowJavaSDK&quot;&gt;Dataflow Java SDK&lt;/a&gt;. In the long term, however, Apache Beam aims to support SDKs implemented in multiple languages, such as Python.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Today, Google submitted the &lt;a href=&quot;http://github.com/GoogleCloudPlatform/DataflowPythonSDK&quot;&gt;Dataflow Python (2.x) SDK&lt;/a&gt; on GitHub. Google is committed to including the in progress python SDK in Apache Beam and, in that spirit, we’ve moved development of the Python SDK to a public repository. While this SDK will not be included with the initial (incubating) releases of Apache Beam, our we plan on incorporating the Python SDK into beam during incubation. We want to take the time to implement changes from the &lt;a href=&quot;https://goo.gl/nk5OM0&quot;&gt;technical vision&lt;/a&gt; into the Java SDK before we introduce a Python SDK for Apache Beam. We believe this will allow us to work on the model and SDKs in an ordered fashion.&lt;/p&gt;

&lt;p&gt;You can look for the Apache Beam Python SDK in the coming months once we finish forking and refactoring the Java SDK.&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Apache Beam Team&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 13:00:00 -0800</pubDate>
        <link>http://beam.incubator.apache.org/beam/python/sdk/2016/02/25/python-sdk-now-public.html</link>
        <guid isPermaLink="true">http://beam.incubator.apache.org/beam/python/sdk/2016/02/25/python-sdk-now-public.html</guid>
        
        
        <category>beam</category>
        
        <category>python</category>
        
        <category>sdk</category>
        
      </item>
    
  </channel>
</rss>
